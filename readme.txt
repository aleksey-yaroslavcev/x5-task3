
1. Создать новый мавен проект
2. подключить junit (прописать зависимость в pom)


3. содать абстрактный класс Human
        поля:
            имя
            фамилия
            возвраст
        методы:
            sleep()
            wakeUp()
            представиться - выводит в консоль приветсвие от имени объекта

        переопределить метод toString так чтобы он возвращал имя и фамилию через пробел

    содать класс SleepException который наследуется от RunTimeException
    (конструктор должен принимать параметр типа Human, и в этом конструкторе должно генерироваться сообщение о том что
    человек спит и не может ничего делть в это момент)

    создать логическое поле sleep и метод isSleep, который будет бросать исключение SleepException


4. Создать интерфейс Workable
        void work();

    Создать класс Employee, который наследуется от Human и реализует интерфейсы Workable
    метод work() вывовдит в консоль информацию о том что человек работает
    учесть что человек не может работать во время сна


5. Создать Классы Tester, Developer и Manger в которых соответствующе переопределен метод work
    (тестируюет программу, пишет код, составляет отчет)
    учесть что человек не может работать во время сна

6. создать класс Book в нем должны быть поля:
    автор
    название
    количество страниц
    переопределить метод toString и equals
    (правильно вырать типы данных)

7. Создать интерфейс BookReader

    void readBook(Book book);

8. Создать интерфейс BookOwner

    void addBook(Book book);
    Book giveBook(String bookName);


9. создать класс исключение TakeBookException, который наследуется от RuntimeException

10. Создать класс Student который наследуется от Human и реализует интерфейс BookReader и BookOwner
    студент может хранить одну книгу (создать поле book)
    у него должно быть поля с количеством прочитанных книг и страниц (геттеры)


    метод addBook должен
        - сохранять полученную книгу в соответсвующее поле
        - бросать исключение TakeBookException с информацией о том, что у студента уже есть книга и он не может хранить
        больше одной книги
            (нужно указать у какого студента какая книга уже есть и какую книгу он не може взять)

    giveBook
        - возращает книгу если у студента есть книга с таким названием и очищаться соответствующее поле (null в помощь)
        - бросает исключение TakeBookException если такой книги нет, но есть другая книга
            (должно быть информативное сообщение)
        - если у студента нет никакой книги (поле book = null) бросить TakeBookException и выводить в консоль
        соответствующее сообщение

    readBook
        - делает +1 к прочитанным книгам и должен правильно увеличивать количество страниц

    dropBook
        - присваивает полю book значение null и ввыводит сообщение о том что такйо то студент выбросил такуюто книгу

    учесть что студент не может делать что то во время сна

11. Создать класс Library который реализует интерфейс BookOwner
    тут должен быть массив на 5 книг

    takeBook
        - проверяет есть ли в массиве такая книга
        - если нет, то записывает ее в свободную ячеку массива и вернуть true
        - если свободной ячейки нет, то бросам TakeBookException
        - если такая книга есть, то вывести сообщение о то вывести сообщение о том что такая книга уже есть и вернуть false

    giveBook
        - роверяет есть ли в массиве такая книга
        - если нет, то бросается исключение TakeBookException
        - если есть, то возвращается эта книга а ячека в массиве "очищается"

     getSize возвращает количество кни в наличии

12. Создать класс Intern, который наследуется от класса Student и реализует интерфейс Workable
    переопределить метод work

12. создать тест в котором будут создаваться сотрудники всех типов (в переменной Employee) и проверяться работа метода toString
    создать тест в котором будет проверятся бросание исключения SleepException
    создать тесты в которых будет проверяться бросание TakeBookException в ситуациях когда это нужно
    (переполнение библиотеки, у студента не может быть больше одной книги, у студента или в библиотеке нет книги)
    создать тест который будет проверять правильность подсчета книг в библиотеке
    создать тест в котором будет проверяться правильность подстчета прочитанных страниц и книг

13. сделать перегрузку конструкторов, которая принимает параметром объект родительского класса

14. не забываем про:
        - конструкторы
        - контроль доступа к полям и методам
        - выносим копипасту в отдельные методы
        - спользовать final где это уместно

15. написать краткую документацию на публичные классы и методы (javaDoc), что они делают и возвращают

    пример
    /**
     *  класс с которого начинается выполенеи программы
    */
    public class Main{
        /**
         *  точка входа в программу
        */
        public static void main(String[] args{

        }
    }


16. создать класс Main c методом main

        создать пременную Human human
        записать в нее объект Student
        уложить его спать и разбудить
        создать библиотеку и записать ее в переменную BookOwner
        положить в библиотеку 3 книги
        студет должен получить  из библиотеки книгу, прочитать, положить обратно в библиотеку
        (использовать приведение типов если нужно)
        этот же студет должен взять другую книгу, прочитать ее и выбросить
        в библиотек должно остаться 2 книги

        создать переменную Workable worker, создать и записать сюда тестировщика
        вызвать метод work
        создать на основе студента Интерна и записать в переменную worker
        вызвать метод work

